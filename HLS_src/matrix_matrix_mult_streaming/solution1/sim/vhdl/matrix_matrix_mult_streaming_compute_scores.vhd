-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_matrix_mult_streaming_compute_scores is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    feature_vector_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    feature_vector_TVALID : IN STD_LOGIC;
    feature_vector_TREADY : OUT STD_LOGIC;
    feature_vector_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    feature_vector_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    feature_vector_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    feature_vector_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    feature_vector_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    feature_vector_TDEST : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of matrix_matrix_mult_streaming_compute_scores is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal feature_vector_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln169_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln169_fu_79_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal k_reg_68 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_feature_vector_V_data_V_U_apdone_blk : STD_LOGIC;
    signal feature_vector_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal feature_vector_TVALID_int_regslice : STD_LOGIC;
    signal feature_vector_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_feature_vector_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_feature_vector_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal feature_vector_TKEEP_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_feature_vector_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_feature_vector_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_feature_vector_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal feature_vector_TSTRB_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_feature_vector_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_feature_vector_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_feature_vector_V_user_V_U_apdone_blk : STD_LOGIC;
    signal feature_vector_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_feature_vector_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_feature_vector_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_feature_vector_V_last_V_U_apdone_blk : STD_LOGIC;
    signal feature_vector_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_feature_vector_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_feature_vector_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_feature_vector_V_id_V_U_apdone_blk : STD_LOGIC;
    signal feature_vector_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_feature_vector_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_feature_vector_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_feature_vector_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal feature_vector_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_feature_vector_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_feature_vector_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrix_matrix_mult_streaming_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_feature_vector_V_data_V_U : component matrix_matrix_mult_streaming_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => feature_vector_TDATA,
        vld_in => feature_vector_TVALID,
        ack_in => regslice_both_feature_vector_V_data_V_U_ack_in,
        data_out => feature_vector_TDATA_int_regslice,
        vld_out => feature_vector_TVALID_int_regslice,
        ack_out => feature_vector_TREADY_int_regslice,
        apdone_blk => regslice_both_feature_vector_V_data_V_U_apdone_blk);

    regslice_both_feature_vector_V_keep_V_U : component matrix_matrix_mult_streaming_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => feature_vector_TKEEP,
        vld_in => feature_vector_TVALID,
        ack_in => regslice_both_feature_vector_V_keep_V_U_ack_in,
        data_out => feature_vector_TKEEP_int_regslice,
        vld_out => regslice_both_feature_vector_V_keep_V_U_vld_out,
        ack_out => feature_vector_TREADY_int_regslice,
        apdone_blk => regslice_both_feature_vector_V_keep_V_U_apdone_blk);

    regslice_both_feature_vector_V_strb_V_U : component matrix_matrix_mult_streaming_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => feature_vector_TSTRB,
        vld_in => feature_vector_TVALID,
        ack_in => regslice_both_feature_vector_V_strb_V_U_ack_in,
        data_out => feature_vector_TSTRB_int_regslice,
        vld_out => regslice_both_feature_vector_V_strb_V_U_vld_out,
        ack_out => feature_vector_TREADY_int_regslice,
        apdone_blk => regslice_both_feature_vector_V_strb_V_U_apdone_blk);

    regslice_both_feature_vector_V_user_V_U : component matrix_matrix_mult_streaming_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => feature_vector_TUSER,
        vld_in => feature_vector_TVALID,
        ack_in => regslice_both_feature_vector_V_user_V_U_ack_in,
        data_out => feature_vector_TUSER_int_regslice,
        vld_out => regslice_both_feature_vector_V_user_V_U_vld_out,
        ack_out => feature_vector_TREADY_int_regslice,
        apdone_blk => regslice_both_feature_vector_V_user_V_U_apdone_blk);

    regslice_both_feature_vector_V_last_V_U : component matrix_matrix_mult_streaming_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => feature_vector_TLAST,
        vld_in => feature_vector_TVALID,
        ack_in => regslice_both_feature_vector_V_last_V_U_ack_in,
        data_out => feature_vector_TLAST_int_regslice,
        vld_out => regslice_both_feature_vector_V_last_V_U_vld_out,
        ack_out => feature_vector_TREADY_int_regslice,
        apdone_blk => regslice_both_feature_vector_V_last_V_U_apdone_blk);

    regslice_both_feature_vector_V_id_V_U : component matrix_matrix_mult_streaming_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => feature_vector_TID,
        vld_in => feature_vector_TVALID,
        ack_in => regslice_both_feature_vector_V_id_V_U_ack_in,
        data_out => feature_vector_TID_int_regslice,
        vld_out => regslice_both_feature_vector_V_id_V_U_vld_out,
        ack_out => feature_vector_TREADY_int_regslice,
        apdone_blk => regslice_both_feature_vector_V_id_V_U_apdone_blk);

    regslice_both_feature_vector_V_dest_V_U : component matrix_matrix_mult_streaming_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => feature_vector_TDEST,
        vld_in => feature_vector_TVALID,
        ack_in => regslice_both_feature_vector_V_dest_V_U_ack_in,
        data_out => feature_vector_TDEST_int_regslice,
        vld_out => regslice_both_feature_vector_V_dest_V_U_vld_out,
        ack_out => feature_vector_TREADY_int_regslice,
        apdone_blk => regslice_both_feature_vector_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    k_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_68 <= ap_const_lv6_0;
            elsif ((not(((icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (feature_vector_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_68 <= add_ln169_fu_79_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln169_fu_85_p2, feature_vector_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (feature_vector_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (feature_vector_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln169_fu_85_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln169_fu_79_p2 <= std_logic_vector(unsigned(k_reg_68) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln169_fu_85_p2, feature_vector_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (feature_vector_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    feature_vector_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln169_fu_85_p2, feature_vector_TVALID_int_regslice)
    begin
        if (((icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            feature_vector_TDATA_blk_n <= feature_vector_TVALID_int_regslice;
        else 
            feature_vector_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_vector_TREADY <= regslice_both_feature_vector_V_data_V_U_ack_in;

    feature_vector_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln169_fu_85_p2, feature_vector_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (feature_vector_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln169_fu_85_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            feature_vector_TREADY_int_regslice <= ap_const_logic_1;
        else 
            feature_vector_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln169_fu_85_p2 <= "1" when (k_reg_68 = ap_const_lv6_20) else "0";
end behav;
