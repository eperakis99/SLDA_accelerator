// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vec_vec_op_streaming_vector_add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vec1_TDATA,
        vec1_TVALID,
        vec1_TREADY,
        vec1_TKEEP,
        vec1_TSTRB,
        vec1_TUSER,
        vec1_TLAST,
        vec1_TID,
        vec1_TDEST,
        vec2_TDATA,
        vec2_TVALID,
        vec2_TREADY,
        vec2_TKEEP,
        vec2_TSTRB,
        vec2_TUSER,
        vec2_TLAST,
        vec2_TID,
        vec2_TDEST,
        vec_out_TDATA,
        vec_out_TVALID,
        vec_out_TREADY,
        vec_out_TKEEP,
        vec_out_TSTRB,
        vec_out_TUSER,
        vec_out_TLAST,
        vec_out_TID,
        vec_out_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] vec1_TDATA;
input   vec1_TVALID;
output   vec1_TREADY;
input  [15:0] vec1_TKEEP;
input  [15:0] vec1_TSTRB;
input  [1:0] vec1_TUSER;
input  [0:0] vec1_TLAST;
input  [4:0] vec1_TID;
input  [5:0] vec1_TDEST;
input  [127:0] vec2_TDATA;
input   vec2_TVALID;
output   vec2_TREADY;
input  [15:0] vec2_TKEEP;
input  [15:0] vec2_TSTRB;
input  [1:0] vec2_TUSER;
input  [0:0] vec2_TLAST;
input  [4:0] vec2_TID;
input  [5:0] vec2_TDEST;
output  [127:0] vec_out_TDATA;
output   vec_out_TVALID;
input   vec_out_TREADY;
output  [15:0] vec_out_TKEEP;
output  [15:0] vec_out_TSTRB;
output  [1:0] vec_out_TUSER;
output  [0:0] vec_out_TLAST;
output  [4:0] vec_out_TID;
output  [5:0] vec_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vec1_TREADY;
reg vec2_TREADY;
reg vec_out_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    vec1_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln43_fu_262_p2;
reg    vec2_TDATA_blk_n;
reg    vec_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln43_reg_852;
reg   [5:0] j_reg_245;
wire   [5:0] add_ln43_fu_256_p2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] add_ln51_fu_638_p2;
reg   [7:0] add_ln51_reg_856;
wire   [7:0] add_ln51_1_fu_664_p2;
reg   [7:0] add_ln51_1_reg_861;
wire   [7:0] add_ln51_2_fu_670_p2;
reg   [7:0] add_ln51_2_reg_866;
wire   [7:0] add_ln51_3_fu_676_p2;
reg   [7:0] add_ln51_3_reg_871;
wire   [7:0] add_ln51_4_fu_682_p2;
reg   [7:0] add_ln51_4_reg_876;
wire   [7:0] add_ln51_5_fu_688_p2;
reg   [7:0] add_ln51_5_reg_881;
wire   [7:0] add_ln51_6_fu_694_p2;
reg   [7:0] add_ln51_6_reg_886;
wire   [7:0] add_ln51_7_fu_700_p2;
reg   [7:0] add_ln51_7_reg_891;
wire   [7:0] add_ln51_8_fu_706_p2;
reg   [7:0] add_ln51_8_reg_896;
wire   [7:0] add_ln51_9_fu_712_p2;
reg   [7:0] add_ln51_9_reg_901;
wire   [7:0] add_ln51_10_fu_718_p2;
reg   [7:0] add_ln51_10_reg_906;
wire   [7:0] add_ln51_11_fu_724_p2;
reg   [7:0] add_ln51_11_reg_911;
wire   [7:0] add_ln51_12_fu_730_p2;
reg   [7:0] add_ln51_12_reg_916;
wire   [7:0] add_ln51_13_fu_736_p2;
reg   [7:0] add_ln51_13_reg_921;
wire   [7:0] add_ln51_14_fu_742_p2;
reg   [7:0] add_ln51_14_reg_926;
wire   [7:0] add_ln51_15_fu_748_p2;
reg   [7:0] add_ln51_15_reg_931;
reg   [15:0] trunc_ln5_reg_936;
reg   [15:0] tmp_reg_941;
reg   [1:0] trunc_ln308_s_reg_946;
reg   [0:0] tmp_2_reg_951;
reg   [4:0] trunc_ln308_2_reg_956;
reg   [5:0] trunc_ln308_3_reg_961;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln45_fu_296_p1;
wire   [7:0] trunc_ln46_fu_478_p1;
wire   [7:0] trunc_ln45_1_fu_300_p4;
wire   [7:0] trunc_ln46_1_fu_482_p4;
wire   [7:0] trunc_ln45_2_fu_310_p4;
wire   [7:0] trunc_ln46_2_fu_492_p4;
wire   [7:0] trunc_ln45_3_fu_320_p4;
wire   [7:0] trunc_ln46_3_fu_502_p4;
wire   [7:0] trunc_ln45_4_fu_330_p4;
wire   [7:0] trunc_ln46_4_fu_512_p4;
wire   [7:0] trunc_ln45_5_fu_340_p4;
wire   [7:0] trunc_ln46_5_fu_522_p4;
wire   [7:0] trunc_ln45_6_fu_350_p4;
wire   [7:0] trunc_ln46_6_fu_532_p4;
wire   [7:0] trunc_ln45_7_fu_360_p4;
wire   [7:0] trunc_ln46_7_fu_542_p4;
wire   [7:0] trunc_ln45_8_fu_370_p4;
wire   [7:0] trunc_ln46_8_fu_552_p4;
wire   [7:0] trunc_ln45_9_fu_380_p4;
wire   [7:0] trunc_ln46_9_fu_562_p4;
wire   [7:0] trunc_ln45_s_fu_390_p4;
wire   [7:0] trunc_ln46_s_fu_572_p4;
wire   [7:0] trunc_ln45_10_fu_400_p4;
wire   [7:0] trunc_ln46_10_fu_582_p4;
wire   [7:0] trunc_ln45_11_fu_410_p4;
wire   [7:0] trunc_ln46_11_fu_592_p4;
wire   [7:0] trunc_ln45_12_fu_420_p4;
wire   [7:0] trunc_ln46_12_fu_602_p4;
wire   [7:0] trunc_ln45_13_fu_430_p4;
wire   [7:0] trunc_ln46_13_fu_612_p4;
wire   [7:0] trunc_ln45_14_fu_440_p4;
wire   [7:0] trunc_ln46_14_fu_622_p4;
wire   [189:0] and_ln_cast_fu_644_p9;
wire   [0:0] cmp45_fu_632_p2;
wire   [189:0] or_ln52_fu_754_p2;
wire   [189:0] tmp_s_fu_450_p11;
wire   [189:0] select_ln52_fu_760_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_245 <= 6'd0;
    end else if (((icmp_ln43_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_245 <= add_ln43_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln51_10_reg_906 <= add_ln51_10_fu_718_p2;
        add_ln51_11_reg_911 <= add_ln51_11_fu_724_p2;
        add_ln51_12_reg_916 <= add_ln51_12_fu_730_p2;
        add_ln51_13_reg_921 <= add_ln51_13_fu_736_p2;
        add_ln51_14_reg_926 <= add_ln51_14_fu_742_p2;
        add_ln51_15_reg_931 <= add_ln51_15_fu_748_p2;
        add_ln51_1_reg_861 <= add_ln51_1_fu_664_p2;
        add_ln51_2_reg_866 <= add_ln51_2_fu_670_p2;
        add_ln51_3_reg_871 <= add_ln51_3_fu_676_p2;
        add_ln51_4_reg_876 <= add_ln51_4_fu_682_p2;
        add_ln51_5_reg_881 <= add_ln51_5_fu_688_p2;
        add_ln51_6_reg_886 <= add_ln51_6_fu_694_p2;
        add_ln51_7_reg_891 <= add_ln51_7_fu_700_p2;
        add_ln51_8_reg_896 <= add_ln51_8_fu_706_p2;
        add_ln51_9_reg_901 <= add_ln51_9_fu_712_p2;
        add_ln51_reg_856 <= add_ln51_fu_638_p2;
        tmp_2_reg_951 <= select_ln52_fu_760_p3[32'd168];
        tmp_reg_941 <= {{select_ln52_fu_760_p3[143:128]}};
        trunc_ln308_2_reg_956 <= {{select_ln52_fu_760_p3[180:176]}};
        trunc_ln308_3_reg_961 <= {{select_ln52_fu_760_p3[189:184]}};
        trunc_ln308_s_reg_946 <= {{select_ln52_fu_760_p3[161:160]}};
        trunc_ln5_reg_936 <= {{select_ln52_fu_760_p3[159:144]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln43_reg_852 <= icmp_ln43_fu_262_p2;
    end
end

always @ (*) begin
    if ((icmp_ln43_fu_262_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_TDATA_blk_n = vec1_TVALID;
    end else begin
        vec1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_TREADY = 1'b1;
    end else begin
        vec1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec2_TDATA_blk_n = vec2_TVALID;
    end else begin
        vec2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec2_TREADY = 1'b1;
    end else begin
        vec2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_852 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_out_TDATA_blk_n = vec_out_TREADY;
    end else begin
        vec_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_852 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_out_TVALID = 1'b1;
    end else begin
        vec_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln43_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln43_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_256_p2 = (j_reg_245 + 6'd1);

assign add_ln51_10_fu_718_p2 = (trunc_ln45_s_fu_390_p4 + trunc_ln46_s_fu_572_p4);

assign add_ln51_11_fu_724_p2 = (trunc_ln45_10_fu_400_p4 + trunc_ln46_10_fu_582_p4);

assign add_ln51_12_fu_730_p2 = (trunc_ln45_11_fu_410_p4 + trunc_ln46_11_fu_592_p4);

assign add_ln51_13_fu_736_p2 = (trunc_ln45_12_fu_420_p4 + trunc_ln46_12_fu_602_p4);

assign add_ln51_14_fu_742_p2 = (trunc_ln45_13_fu_430_p4 + trunc_ln46_13_fu_612_p4);

assign add_ln51_15_fu_748_p2 = (trunc_ln45_14_fu_440_p4 + trunc_ln46_14_fu_622_p4);

assign add_ln51_1_fu_664_p2 = (trunc_ln45_1_fu_300_p4 + trunc_ln46_1_fu_482_p4);

assign add_ln51_2_fu_670_p2 = (trunc_ln45_2_fu_310_p4 + trunc_ln46_2_fu_492_p4);

assign add_ln51_3_fu_676_p2 = (trunc_ln45_3_fu_320_p4 + trunc_ln46_3_fu_502_p4);

assign add_ln51_4_fu_682_p2 = (trunc_ln45_4_fu_330_p4 + trunc_ln46_4_fu_512_p4);

assign add_ln51_5_fu_688_p2 = (trunc_ln45_5_fu_340_p4 + trunc_ln46_5_fu_522_p4);

assign add_ln51_6_fu_694_p2 = (trunc_ln45_6_fu_350_p4 + trunc_ln46_6_fu_532_p4);

assign add_ln51_7_fu_700_p2 = (trunc_ln45_7_fu_360_p4 + trunc_ln46_7_fu_542_p4);

assign add_ln51_8_fu_706_p2 = (trunc_ln45_8_fu_370_p4 + trunc_ln46_8_fu_552_p4);

assign add_ln51_9_fu_712_p2 = (trunc_ln45_9_fu_380_p4 + trunc_ln46_9_fu_562_p4);

assign add_ln51_fu_638_p2 = (trunc_ln45_fu_296_p1 + trunc_ln46_fu_478_p1);

assign and_ln_cast_fu_644_p9 = {{{{{{{{vec1_TDEST}, {3'd0}}, {vec1_TID}}, {14'd0}}, {vec1_TUSER}}, {vec1_TSTRB}}, {vec1_TKEEP}}, {vec1_TDATA}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln43_reg_852 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vec_out_TREADY == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln43_fu_262_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln43_fu_262_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln43_reg_852 == 1'd0) & (vec_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln43_fu_262_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln43_fu_262_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln43_reg_852 == 1'd0) & (vec_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln43_fu_262_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln43_fu_262_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((icmp_ln43_fu_262_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln43_fu_262_p2 == 1'd0) & (vec1_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln43_reg_852 == 1'd0) & (vec_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln43_reg_852 == 1'd0) & (vec_out_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cmp45_fu_632_p2 = ((j_reg_245 == 6'd31) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_262_p2 = ((j_reg_245 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln52_fu_754_p2 = (190'd374144419156711147060143317175368453031918731001856 | and_ln_cast_fu_644_p9);

assign select_ln52_fu_760_p3 = ((cmp45_fu_632_p2[0:0] == 1'b1) ? or_ln52_fu_754_p2 : tmp_s_fu_450_p11);

assign tmp_s_fu_450_p11 = {{{{{{{{{{vec1_TDEST}, {3'd0}}, {vec1_TID}}, {7'd0}}, {vec1_TLAST}}, {6'd0}}, {vec1_TUSER}}, {vec1_TSTRB}}, {vec1_TKEEP}}, {vec1_TDATA}};

assign trunc_ln45_10_fu_400_p4 = {{vec1_TDATA[95:88]}};

assign trunc_ln45_11_fu_410_p4 = {{vec1_TDATA[103:96]}};

assign trunc_ln45_12_fu_420_p4 = {{vec1_TDATA[111:104]}};

assign trunc_ln45_13_fu_430_p4 = {{vec1_TDATA[119:112]}};

assign trunc_ln45_14_fu_440_p4 = {{vec1_TDATA[127:120]}};

assign trunc_ln45_1_fu_300_p4 = {{vec1_TDATA[15:8]}};

assign trunc_ln45_2_fu_310_p4 = {{vec1_TDATA[23:16]}};

assign trunc_ln45_3_fu_320_p4 = {{vec1_TDATA[31:24]}};

assign trunc_ln45_4_fu_330_p4 = {{vec1_TDATA[39:32]}};

assign trunc_ln45_5_fu_340_p4 = {{vec1_TDATA[47:40]}};

assign trunc_ln45_6_fu_350_p4 = {{vec1_TDATA[55:48]}};

assign trunc_ln45_7_fu_360_p4 = {{vec1_TDATA[63:56]}};

assign trunc_ln45_8_fu_370_p4 = {{vec1_TDATA[71:64]}};

assign trunc_ln45_9_fu_380_p4 = {{vec1_TDATA[79:72]}};

assign trunc_ln45_fu_296_p1 = vec1_TDATA[7:0];

assign trunc_ln45_s_fu_390_p4 = {{vec1_TDATA[87:80]}};

assign trunc_ln46_10_fu_582_p4 = {{vec2_TDATA[95:88]}};

assign trunc_ln46_11_fu_592_p4 = {{vec2_TDATA[103:96]}};

assign trunc_ln46_12_fu_602_p4 = {{vec2_TDATA[111:104]}};

assign trunc_ln46_13_fu_612_p4 = {{vec2_TDATA[119:112]}};

assign trunc_ln46_14_fu_622_p4 = {{vec2_TDATA[127:120]}};

assign trunc_ln46_1_fu_482_p4 = {{vec2_TDATA[15:8]}};

assign trunc_ln46_2_fu_492_p4 = {{vec2_TDATA[23:16]}};

assign trunc_ln46_3_fu_502_p4 = {{vec2_TDATA[31:24]}};

assign trunc_ln46_4_fu_512_p4 = {{vec2_TDATA[39:32]}};

assign trunc_ln46_5_fu_522_p4 = {{vec2_TDATA[47:40]}};

assign trunc_ln46_6_fu_532_p4 = {{vec2_TDATA[55:48]}};

assign trunc_ln46_7_fu_542_p4 = {{vec2_TDATA[63:56]}};

assign trunc_ln46_8_fu_552_p4 = {{vec2_TDATA[71:64]}};

assign trunc_ln46_9_fu_562_p4 = {{vec2_TDATA[79:72]}};

assign trunc_ln46_fu_478_p1 = vec2_TDATA[7:0];

assign trunc_ln46_s_fu_572_p4 = {{vec2_TDATA[87:80]}};

assign vec_out_TDATA = {{{{{{{{{{{{{{{{add_ln51_15_reg_931}, {add_ln51_14_reg_926}}, {add_ln51_13_reg_921}}, {add_ln51_12_reg_916}}, {add_ln51_11_reg_911}}, {add_ln51_10_reg_906}}, {add_ln51_9_reg_901}}, {add_ln51_8_reg_896}}, {add_ln51_7_reg_891}}, {add_ln51_6_reg_886}}, {add_ln51_5_reg_881}}, {add_ln51_4_reg_876}}, {add_ln51_3_reg_871}}, {add_ln51_2_reg_866}}, {add_ln51_1_reg_861}}, {add_ln51_reg_856}};

assign vec_out_TDEST = trunc_ln308_3_reg_961;

assign vec_out_TID = trunc_ln308_2_reg_956;

assign vec_out_TKEEP = tmp_reg_941;

assign vec_out_TLAST = tmp_2_reg_951;

assign vec_out_TSTRB = trunc_ln5_reg_936;

assign vec_out_TUSER = trunc_ln308_s_reg_946;

endmodule //vec_vec_op_streaming_vector_add
