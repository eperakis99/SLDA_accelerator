// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vec_vec_op_streaming_vector_scale (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vec1_TDATA,
        vec1_TVALID,
        vec1_TREADY,
        vec1_TKEEP,
        vec1_TSTRB,
        vec1_TUSER,
        vec1_TLAST,
        vec1_TID,
        vec1_TDEST,
        vec_out_TDATA,
        vec_out_TVALID,
        vec_out_TREADY,
        vec_out_TKEEP,
        vec_out_TSTRB,
        vec_out_TUSER,
        vec_out_TLAST,
        vec_out_TID,
        vec_out_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] vec1_TDATA;
input   vec1_TVALID;
output   vec1_TREADY;
input  [15:0] vec1_TKEEP;
input  [15:0] vec1_TSTRB;
input  [1:0] vec1_TUSER;
input  [0:0] vec1_TLAST;
input  [4:0] vec1_TID;
input  [5:0] vec1_TDEST;
output  [127:0] vec_out_TDATA;
output   vec_out_TVALID;
input   vec_out_TREADY;
output  [15:0] vec_out_TKEEP;
output  [15:0] vec_out_TSTRB;
output  [1:0] vec_out_TUSER;
output  [0:0] vec_out_TLAST;
output  [4:0] vec_out_TID;
output  [5:0] vec_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vec1_TREADY;
reg vec_out_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    vec1_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln250_fu_266_p2;
reg    vec_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln250_reg_1108;
reg   [5:0] j_reg_249;
wire   [5:0] add_ln250_fu_260_p2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] add_ln257_fu_354_p2;
reg   [7:0] add_ln257_reg_1112;
wire   [7:0] add_ln257_1_fu_430_p2;
reg   [7:0] add_ln257_1_reg_1117;
wire   [7:0] add_ln257_2_fu_472_p2;
reg   [7:0] add_ln257_2_reg_1122;
wire   [7:0] add_ln257_3_fu_514_p2;
reg   [7:0] add_ln257_3_reg_1127;
wire   [7:0] add_ln257_4_fu_556_p2;
reg   [7:0] add_ln257_4_reg_1132;
wire   [7:0] add_ln257_5_fu_598_p2;
reg   [7:0] add_ln257_5_reg_1137;
wire   [7:0] add_ln257_6_fu_640_p2;
reg   [7:0] add_ln257_6_reg_1142;
wire   [7:0] add_ln257_7_fu_682_p2;
reg   [7:0] add_ln257_7_reg_1147;
wire   [7:0] add_ln257_8_fu_724_p2;
reg   [7:0] add_ln257_8_reg_1152;
wire   [7:0] add_ln257_9_fu_766_p2;
reg   [7:0] add_ln257_9_reg_1157;
wire   [7:0] add_ln257_10_fu_808_p2;
reg   [7:0] add_ln257_10_reg_1162;
wire   [7:0] add_ln257_11_fu_850_p2;
reg   [7:0] add_ln257_11_reg_1167;
wire   [7:0] add_ln257_12_fu_892_p2;
reg   [7:0] add_ln257_12_reg_1172;
wire   [7:0] add_ln257_13_fu_934_p2;
reg   [7:0] add_ln257_13_reg_1177;
wire   [7:0] add_ln257_14_fu_976_p2;
reg   [7:0] add_ln257_14_reg_1182;
wire   [7:0] add_ln257_15_fu_1018_p2;
reg   [7:0] add_ln257_15_reg_1187;
reg   [15:0] trunc_ln_reg_1192;
reg   [15:0] tmp_31_reg_1197;
reg   [1:0] trunc_ln308_7_reg_1202;
reg   [0:0] tmp_reg_1207;
reg   [4:0] trunc_ln308_9_reg_1212;
reg   [5:0] trunc_ln308_s_reg_1217;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] trunc_ln257_fu_330_p1;
wire   [6:0] trunc_ln257_1_fu_342_p1;
wire   [7:0] shl_ln_fu_334_p3;
wire   [7:0] shl_ln257_1_fu_346_p3;
wire   [189:0] and_ln_cast_fu_360_p9;
wire   [0:0] cmp26_fu_324_p2;
wire   [189:0] or_ln258_fu_380_p2;
wire   [189:0] tmp_s_fu_300_p11;
wire   [189:0] select_ln258_fu_386_p3;
wire   [4:0] tmp_2_fu_394_p4;
wire   [6:0] tmp_3_fu_412_p4;
wire   [7:0] and_ln1_fu_404_p3;
wire   [7:0] and_ln257_1_fu_422_p3;
wire   [4:0] tmp_4_fu_436_p4;
wire   [6:0] tmp_5_fu_454_p4;
wire   [7:0] and_ln257_2_fu_446_p3;
wire   [7:0] and_ln257_3_fu_464_p3;
wire   [4:0] tmp_6_fu_478_p4;
wire   [6:0] tmp_7_fu_496_p4;
wire   [7:0] and_ln257_4_fu_488_p3;
wire   [7:0] and_ln257_5_fu_506_p3;
wire   [4:0] tmp_8_fu_520_p4;
wire   [6:0] tmp_9_fu_538_p4;
wire   [7:0] and_ln257_6_fu_530_p3;
wire   [7:0] and_ln257_7_fu_548_p3;
wire   [4:0] tmp_1_fu_562_p4;
wire   [6:0] tmp_10_fu_580_p4;
wire   [7:0] and_ln257_8_fu_572_p3;
wire   [7:0] and_ln257_9_fu_590_p3;
wire   [4:0] tmp_11_fu_604_p4;
wire   [6:0] tmp_12_fu_622_p4;
wire   [7:0] and_ln257_s_fu_614_p3;
wire   [7:0] and_ln257_10_fu_632_p3;
wire   [4:0] tmp_13_fu_646_p4;
wire   [6:0] tmp_14_fu_664_p4;
wire   [7:0] and_ln257_11_fu_656_p3;
wire   [7:0] and_ln257_12_fu_674_p3;
wire   [4:0] tmp_15_fu_688_p4;
wire   [6:0] tmp_16_fu_706_p4;
wire   [7:0] and_ln257_13_fu_698_p3;
wire   [7:0] and_ln257_14_fu_716_p3;
wire   [4:0] tmp_17_fu_730_p4;
wire   [6:0] tmp_18_fu_748_p4;
wire   [7:0] and_ln257_15_fu_740_p3;
wire   [7:0] and_ln257_16_fu_758_p3;
wire   [4:0] tmp_19_fu_772_p4;
wire   [6:0] tmp_20_fu_790_p4;
wire   [7:0] and_ln257_17_fu_782_p3;
wire   [7:0] and_ln257_18_fu_800_p3;
wire   [4:0] tmp_21_fu_814_p4;
wire   [6:0] tmp_22_fu_832_p4;
wire   [7:0] and_ln257_19_fu_824_p3;
wire   [7:0] and_ln257_20_fu_842_p3;
wire   [4:0] tmp_23_fu_856_p4;
wire   [6:0] tmp_24_fu_874_p4;
wire   [7:0] and_ln257_21_fu_866_p3;
wire   [7:0] and_ln257_22_fu_884_p3;
wire   [4:0] tmp_25_fu_898_p4;
wire   [6:0] tmp_26_fu_916_p4;
wire   [7:0] and_ln257_23_fu_908_p3;
wire   [7:0] and_ln257_24_fu_926_p3;
wire   [4:0] tmp_27_fu_940_p4;
wire   [6:0] tmp_28_fu_958_p4;
wire   [7:0] and_ln257_25_fu_950_p3;
wire   [7:0] and_ln257_26_fu_968_p3;
wire   [4:0] tmp_29_fu_982_p4;
wire   [6:0] tmp_30_fu_1000_p4;
wire   [7:0] and_ln257_27_fu_992_p3;
wire   [7:0] and_ln257_28_fu_1010_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_249 <= 6'd0;
    end else if (((icmp_ln250_fu_266_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_249 <= add_ln250_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_fu_266_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln257_10_reg_1162[7 : 1] <= add_ln257_10_fu_808_p2[7 : 1];
        add_ln257_11_reg_1167[7 : 1] <= add_ln257_11_fu_850_p2[7 : 1];
        add_ln257_12_reg_1172[7 : 1] <= add_ln257_12_fu_892_p2[7 : 1];
        add_ln257_13_reg_1177[7 : 1] <= add_ln257_13_fu_934_p2[7 : 1];
        add_ln257_14_reg_1182[7 : 1] <= add_ln257_14_fu_976_p2[7 : 1];
        add_ln257_15_reg_1187[7 : 1] <= add_ln257_15_fu_1018_p2[7 : 1];
        add_ln257_1_reg_1117[7 : 1] <= add_ln257_1_fu_430_p2[7 : 1];
        add_ln257_2_reg_1122[7 : 1] <= add_ln257_2_fu_472_p2[7 : 1];
        add_ln257_3_reg_1127[7 : 1] <= add_ln257_3_fu_514_p2[7 : 1];
        add_ln257_4_reg_1132[7 : 1] <= add_ln257_4_fu_556_p2[7 : 1];
        add_ln257_5_reg_1137[7 : 1] <= add_ln257_5_fu_598_p2[7 : 1];
        add_ln257_6_reg_1142[7 : 1] <= add_ln257_6_fu_640_p2[7 : 1];
        add_ln257_7_reg_1147[7 : 1] <= add_ln257_7_fu_682_p2[7 : 1];
        add_ln257_8_reg_1152[7 : 1] <= add_ln257_8_fu_724_p2[7 : 1];
        add_ln257_9_reg_1157[7 : 1] <= add_ln257_9_fu_766_p2[7 : 1];
        add_ln257_reg_1112[7 : 1] <= add_ln257_fu_354_p2[7 : 1];
        tmp_31_reg_1197 <= {{select_ln258_fu_386_p3[143:128]}};
        tmp_reg_1207 <= select_ln258_fu_386_p3[32'd168];
        trunc_ln308_7_reg_1202 <= {{select_ln258_fu_386_p3[161:160]}};
        trunc_ln308_9_reg_1212 <= {{select_ln258_fu_386_p3[180:176]}};
        trunc_ln308_s_reg_1217 <= {{select_ln258_fu_386_p3[189:184]}};
        trunc_ln_reg_1192 <= {{select_ln258_fu_386_p3[159:144]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln250_reg_1108 <= icmp_ln250_fu_266_p2;
    end
end

always @ (*) begin
    if ((icmp_ln250_fu_266_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln250_fu_266_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_TDATA_blk_n = vec1_TVALID;
    end else begin
        vec1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln250_fu_266_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_TREADY = 1'b1;
    end else begin
        vec1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln250_reg_1108 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_out_TDATA_blk_n = vec_out_TREADY;
    end else begin
        vec_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln250_reg_1108 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_out_TVALID = 1'b1;
    end else begin
        vec_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln250_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln250_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln250_fu_260_p2 = (j_reg_249 + 6'd1);

assign add_ln257_10_fu_808_p2 = (and_ln257_17_fu_782_p3 + and_ln257_18_fu_800_p3);

assign add_ln257_11_fu_850_p2 = (and_ln257_19_fu_824_p3 + and_ln257_20_fu_842_p3);

assign add_ln257_12_fu_892_p2 = (and_ln257_21_fu_866_p3 + and_ln257_22_fu_884_p3);

assign add_ln257_13_fu_934_p2 = (and_ln257_23_fu_908_p3 + and_ln257_24_fu_926_p3);

assign add_ln257_14_fu_976_p2 = (and_ln257_25_fu_950_p3 + and_ln257_26_fu_968_p3);

assign add_ln257_15_fu_1018_p2 = (and_ln257_27_fu_992_p3 + and_ln257_28_fu_1010_p3);

assign add_ln257_1_fu_430_p2 = (and_ln1_fu_404_p3 + and_ln257_1_fu_422_p3);

assign add_ln257_2_fu_472_p2 = (and_ln257_2_fu_446_p3 + and_ln257_3_fu_464_p3);

assign add_ln257_3_fu_514_p2 = (and_ln257_4_fu_488_p3 + and_ln257_5_fu_506_p3);

assign add_ln257_4_fu_556_p2 = (and_ln257_6_fu_530_p3 + and_ln257_7_fu_548_p3);

assign add_ln257_5_fu_598_p2 = (and_ln257_8_fu_572_p3 + and_ln257_9_fu_590_p3);

assign add_ln257_6_fu_640_p2 = (and_ln257_s_fu_614_p3 + and_ln257_10_fu_632_p3);

assign add_ln257_7_fu_682_p2 = (and_ln257_11_fu_656_p3 + and_ln257_12_fu_674_p3);

assign add_ln257_8_fu_724_p2 = (and_ln257_13_fu_698_p3 + and_ln257_14_fu_716_p3);

assign add_ln257_9_fu_766_p2 = (and_ln257_15_fu_740_p3 + and_ln257_16_fu_758_p3);

assign add_ln257_fu_354_p2 = (shl_ln_fu_334_p3 + shl_ln257_1_fu_346_p3);

assign and_ln1_fu_404_p3 = {{tmp_2_fu_394_p4}, {3'd0}};

assign and_ln257_10_fu_632_p3 = {{tmp_12_fu_622_p4}, {1'd0}};

assign and_ln257_11_fu_656_p3 = {{tmp_13_fu_646_p4}, {3'd0}};

assign and_ln257_12_fu_674_p3 = {{tmp_14_fu_664_p4}, {1'd0}};

assign and_ln257_13_fu_698_p3 = {{tmp_15_fu_688_p4}, {3'd0}};

assign and_ln257_14_fu_716_p3 = {{tmp_16_fu_706_p4}, {1'd0}};

assign and_ln257_15_fu_740_p3 = {{tmp_17_fu_730_p4}, {3'd0}};

assign and_ln257_16_fu_758_p3 = {{tmp_18_fu_748_p4}, {1'd0}};

assign and_ln257_17_fu_782_p3 = {{tmp_19_fu_772_p4}, {3'd0}};

assign and_ln257_18_fu_800_p3 = {{tmp_20_fu_790_p4}, {1'd0}};

assign and_ln257_19_fu_824_p3 = {{tmp_21_fu_814_p4}, {3'd0}};

assign and_ln257_1_fu_422_p3 = {{tmp_3_fu_412_p4}, {1'd0}};

assign and_ln257_20_fu_842_p3 = {{tmp_22_fu_832_p4}, {1'd0}};

assign and_ln257_21_fu_866_p3 = {{tmp_23_fu_856_p4}, {3'd0}};

assign and_ln257_22_fu_884_p3 = {{tmp_24_fu_874_p4}, {1'd0}};

assign and_ln257_23_fu_908_p3 = {{tmp_25_fu_898_p4}, {3'd0}};

assign and_ln257_24_fu_926_p3 = {{tmp_26_fu_916_p4}, {1'd0}};

assign and_ln257_25_fu_950_p3 = {{tmp_27_fu_940_p4}, {3'd0}};

assign and_ln257_26_fu_968_p3 = {{tmp_28_fu_958_p4}, {1'd0}};

assign and_ln257_27_fu_992_p3 = {{tmp_29_fu_982_p4}, {3'd0}};

assign and_ln257_28_fu_1010_p3 = {{tmp_30_fu_1000_p4}, {1'd0}};

assign and_ln257_2_fu_446_p3 = {{tmp_4_fu_436_p4}, {3'd0}};

assign and_ln257_3_fu_464_p3 = {{tmp_5_fu_454_p4}, {1'd0}};

assign and_ln257_4_fu_488_p3 = {{tmp_6_fu_478_p4}, {3'd0}};

assign and_ln257_5_fu_506_p3 = {{tmp_7_fu_496_p4}, {1'd0}};

assign and_ln257_6_fu_530_p3 = {{tmp_8_fu_520_p4}, {3'd0}};

assign and_ln257_7_fu_548_p3 = {{tmp_9_fu_538_p4}, {1'd0}};

assign and_ln257_8_fu_572_p3 = {{tmp_1_fu_562_p4}, {3'd0}};

assign and_ln257_9_fu_590_p3 = {{tmp_10_fu_580_p4}, {1'd0}};

assign and_ln257_s_fu_614_p3 = {{tmp_11_fu_604_p4}, {3'd0}};

assign and_ln_cast_fu_360_p9 = {{{{{{{{vec1_TDEST}, {3'd0}}, {vec1_TID}}, {14'd0}}, {vec1_TUSER}}, {vec1_TSTRB}}, {vec1_TKEEP}}, {vec1_TDATA}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln250_reg_1108 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vec_out_TREADY == 1'b0)) | ((icmp_ln250_fu_266_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (vec1_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln250_reg_1108 == 1'd0) & (vec_out_TREADY == 1'b0)))) | ((icmp_ln250_fu_266_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (vec1_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln250_reg_1108 == 1'd0) & (vec_out_TREADY == 1'b0)))) | ((icmp_ln250_fu_266_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (vec1_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln250_fu_266_p2 == 1'd0) & (vec1_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln250_reg_1108 == 1'd0) & (vec_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln250_reg_1108 == 1'd0) & (vec_out_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cmp26_fu_324_p2 = ((j_reg_249 == 6'd31) ? 1'b1 : 1'b0);

assign icmp_ln250_fu_266_p2 = ((j_reg_249 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln258_fu_380_p2 = (190'd374144419156711147060143317175368453031918731001856 | and_ln_cast_fu_360_p9);

assign select_ln258_fu_386_p3 = ((cmp26_fu_324_p2[0:0] == 1'b1) ? or_ln258_fu_380_p2 : tmp_s_fu_300_p11);

assign shl_ln257_1_fu_346_p3 = {{trunc_ln257_1_fu_342_p1}, {1'd0}};

assign shl_ln_fu_334_p3 = {{trunc_ln257_fu_330_p1}, {3'd0}};

assign tmp_10_fu_580_p4 = {{select_ln258_fu_386_p3[46:40]}};

assign tmp_11_fu_604_p4 = {{select_ln258_fu_386_p3[52:48]}};

assign tmp_12_fu_622_p4 = {{select_ln258_fu_386_p3[54:48]}};

assign tmp_13_fu_646_p4 = {{select_ln258_fu_386_p3[60:56]}};

assign tmp_14_fu_664_p4 = {{select_ln258_fu_386_p3[62:56]}};

assign tmp_15_fu_688_p4 = {{select_ln258_fu_386_p3[68:64]}};

assign tmp_16_fu_706_p4 = {{select_ln258_fu_386_p3[70:64]}};

assign tmp_17_fu_730_p4 = {{select_ln258_fu_386_p3[76:72]}};

assign tmp_18_fu_748_p4 = {{select_ln258_fu_386_p3[78:72]}};

assign tmp_19_fu_772_p4 = {{select_ln258_fu_386_p3[84:80]}};

assign tmp_1_fu_562_p4 = {{select_ln258_fu_386_p3[44:40]}};

assign tmp_20_fu_790_p4 = {{select_ln258_fu_386_p3[86:80]}};

assign tmp_21_fu_814_p4 = {{select_ln258_fu_386_p3[92:88]}};

assign tmp_22_fu_832_p4 = {{select_ln258_fu_386_p3[94:88]}};

assign tmp_23_fu_856_p4 = {{select_ln258_fu_386_p3[100:96]}};

assign tmp_24_fu_874_p4 = {{select_ln258_fu_386_p3[102:96]}};

assign tmp_25_fu_898_p4 = {{select_ln258_fu_386_p3[108:104]}};

assign tmp_26_fu_916_p4 = {{select_ln258_fu_386_p3[110:104]}};

assign tmp_27_fu_940_p4 = {{select_ln258_fu_386_p3[116:112]}};

assign tmp_28_fu_958_p4 = {{select_ln258_fu_386_p3[118:112]}};

assign tmp_29_fu_982_p4 = {{select_ln258_fu_386_p3[124:120]}};

assign tmp_2_fu_394_p4 = {{select_ln258_fu_386_p3[12:8]}};

assign tmp_30_fu_1000_p4 = {{select_ln258_fu_386_p3[126:120]}};

assign tmp_3_fu_412_p4 = {{select_ln258_fu_386_p3[14:8]}};

assign tmp_4_fu_436_p4 = {{select_ln258_fu_386_p3[20:16]}};

assign tmp_5_fu_454_p4 = {{select_ln258_fu_386_p3[22:16]}};

assign tmp_6_fu_478_p4 = {{select_ln258_fu_386_p3[28:24]}};

assign tmp_7_fu_496_p4 = {{select_ln258_fu_386_p3[30:24]}};

assign tmp_8_fu_520_p4 = {{select_ln258_fu_386_p3[36:32]}};

assign tmp_9_fu_538_p4 = {{select_ln258_fu_386_p3[38:32]}};

assign tmp_s_fu_300_p11 = {{{{{{{{{{vec1_TDEST}, {3'd0}}, {vec1_TID}}, {7'd0}}, {vec1_TLAST}}, {6'd0}}, {vec1_TUSER}}, {vec1_TSTRB}}, {vec1_TKEEP}}, {vec1_TDATA}};

assign trunc_ln257_1_fu_342_p1 = vec1_TDATA[6:0];

assign trunc_ln257_fu_330_p1 = vec1_TDATA[4:0];

assign vec_out_TDATA = {{{{{{{{{{{{{{{{add_ln257_15_reg_1187}, {add_ln257_14_reg_1182}}, {add_ln257_13_reg_1177}}, {add_ln257_12_reg_1172}}, {add_ln257_11_reg_1167}}, {add_ln257_10_reg_1162}}, {add_ln257_9_reg_1157}}, {add_ln257_8_reg_1152}}, {add_ln257_7_reg_1147}}, {add_ln257_6_reg_1142}}, {add_ln257_5_reg_1137}}, {add_ln257_4_reg_1132}}, {add_ln257_3_reg_1127}}, {add_ln257_2_reg_1122}}, {add_ln257_1_reg_1117}}, {add_ln257_reg_1112}};

assign vec_out_TDEST = trunc_ln308_s_reg_1217;

assign vec_out_TID = trunc_ln308_9_reg_1212;

assign vec_out_TKEEP = tmp_31_reg_1197;

assign vec_out_TLAST = tmp_reg_1207;

assign vec_out_TSTRB = trunc_ln_reg_1192;

assign vec_out_TUSER = trunc_ln308_7_reg_1202;

always @ (posedge ap_clk) begin
    add_ln257_reg_1112[0] <= 1'b0;
    add_ln257_1_reg_1117[0] <= 1'b0;
    add_ln257_2_reg_1122[0] <= 1'b0;
    add_ln257_3_reg_1127[0] <= 1'b0;
    add_ln257_4_reg_1132[0] <= 1'b0;
    add_ln257_5_reg_1137[0] <= 1'b0;
    add_ln257_6_reg_1142[0] <= 1'b0;
    add_ln257_7_reg_1147[0] <= 1'b0;
    add_ln257_8_reg_1152[0] <= 1'b0;
    add_ln257_9_reg_1157[0] <= 1'b0;
    add_ln257_10_reg_1162[0] <= 1'b0;
    add_ln257_11_reg_1167[0] <= 1'b0;
    add_ln257_12_reg_1172[0] <= 1'b0;
    add_ln257_13_reg_1177[0] <= 1'b0;
    add_ln257_14_reg_1182[0] <= 1'b0;
    add_ln257_15_reg_1187[0] <= 1'b0;
end

endmodule //vec_vec_op_streaming_vector_scale
