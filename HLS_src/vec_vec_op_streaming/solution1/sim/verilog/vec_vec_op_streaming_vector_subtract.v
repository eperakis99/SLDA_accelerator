// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vec_vec_op_streaming_vector_subtract (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vec1_TDATA,
        vec1_TVALID,
        vec1_TREADY,
        vec1_TKEEP,
        vec1_TSTRB,
        vec1_TUSER,
        vec1_TLAST,
        vec1_TID,
        vec1_TDEST,
        vec2_TDATA,
        vec2_TVALID,
        vec2_TREADY,
        vec2_TKEEP,
        vec2_TSTRB,
        vec2_TUSER,
        vec2_TLAST,
        vec2_TID,
        vec2_TDEST,
        vec_out_TDATA,
        vec_out_TVALID,
        vec_out_TREADY,
        vec_out_TKEEP,
        vec_out_TSTRB,
        vec_out_TUSER,
        vec_out_TLAST,
        vec_out_TID,
        vec_out_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] vec1_TDATA;
input   vec1_TVALID;
output   vec1_TREADY;
input  [15:0] vec1_TKEEP;
input  [15:0] vec1_TSTRB;
input  [1:0] vec1_TUSER;
input  [0:0] vec1_TLAST;
input  [4:0] vec1_TID;
input  [5:0] vec1_TDEST;
input  [127:0] vec2_TDATA;
input   vec2_TVALID;
output   vec2_TREADY;
input  [15:0] vec2_TKEEP;
input  [15:0] vec2_TSTRB;
input  [1:0] vec2_TUSER;
input  [0:0] vec2_TLAST;
input  [4:0] vec2_TID;
input  [5:0] vec2_TDEST;
output  [127:0] vec_out_TDATA;
output   vec_out_TVALID;
input   vec_out_TREADY;
output  [15:0] vec_out_TKEEP;
output  [15:0] vec_out_TSTRB;
output  [1:0] vec_out_TUSER;
output  [0:0] vec_out_TLAST;
output  [4:0] vec_out_TID;
output  [5:0] vec_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vec1_TREADY;
reg vec2_TREADY;
reg vec_out_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    vec1_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln119_fu_216_p2;
reg    vec2_TDATA_blk_n;
reg    vec_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln119_reg_482;
reg   [3:0] j_reg_199;
wire   [3:0] add_ln119_fu_210_p2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] sub_ln127_fu_352_p2;
reg   [31:0] sub_ln127_reg_486;
wire   [31:0] sub_ln127_1_fu_378_p2;
reg   [31:0] sub_ln127_1_reg_491;
wire   [31:0] sub_ln127_2_fu_384_p2;
reg   [31:0] sub_ln127_2_reg_496;
wire   [31:0] sub_ln127_3_fu_390_p2;
reg   [31:0] sub_ln127_3_reg_501;
reg   [15:0] trunc_ln2_reg_506;
reg   [15:0] tmp_reg_511;
reg   [1:0] trunc_ln308_2_reg_516;
reg   [0:0] tmp_1_reg_521;
reg   [4:0] trunc_ln308_4_reg_526;
reg   [5:0] trunc_ln308_5_reg_531;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] trunc_ln121_fu_250_p1;
wire   [31:0] trunc_ln122_fu_312_p1;
wire   [31:0] trunc_ln121_1_fu_254_p4;
wire   [31:0] trunc_ln122_1_fu_316_p4;
wire   [31:0] trunc_ln121_2_fu_264_p4;
wire   [31:0] trunc_ln122_2_fu_326_p4;
wire   [31:0] trunc_ln121_3_fu_274_p4;
wire   [31:0] trunc_ln122_3_fu_336_p4;
wire   [189:0] and_ln_cast_fu_358_p9;
wire   [0:0] cmp43_fu_346_p2;
wire   [189:0] or_ln128_fu_396_p2;
wire   [189:0] or_ln121_4_cast_fu_284_p11;
wire   [189:0] select_ln128_fu_402_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_199 <= 4'd0;
    end else if (((icmp_ln119_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_199 <= add_ln119_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln119_reg_482 <= icmp_ln119_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln127_1_reg_491 <= sub_ln127_1_fu_378_p2;
        sub_ln127_2_reg_496 <= sub_ln127_2_fu_384_p2;
        sub_ln127_3_reg_501 <= sub_ln127_3_fu_390_p2;
        sub_ln127_reg_486 <= sub_ln127_fu_352_p2;
        tmp_1_reg_521 <= select_ln128_fu_402_p3[32'd168];
        tmp_reg_511 <= {{select_ln128_fu_402_p3[143:128]}};
        trunc_ln2_reg_506 <= {{select_ln128_fu_402_p3[159:144]}};
        trunc_ln308_2_reg_516 <= {{select_ln128_fu_402_p3[161:160]}};
        trunc_ln308_4_reg_526 <= {{select_ln128_fu_402_p3[180:176]}};
        trunc_ln308_5_reg_531 <= {{select_ln128_fu_402_p3[189:184]}};
    end
end

always @ (*) begin
    if ((icmp_ln119_fu_216_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_TDATA_blk_n = vec1_TVALID;
    end else begin
        vec1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln119_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_TREADY = 1'b1;
    end else begin
        vec1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec2_TDATA_blk_n = vec2_TVALID;
    end else begin
        vec2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln119_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec2_TREADY = 1'b1;
    end else begin
        vec2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_reg_482 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_out_TDATA_blk_n = vec_out_TREADY;
    end else begin
        vec_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln119_reg_482 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_out_TVALID = 1'b1;
    end else begin
        vec_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln119_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln119_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln119_fu_210_p2 = (j_reg_199 + 4'd1);

assign and_ln_cast_fu_358_p9 = {{{{{{{{vec1_TDEST}, {3'd0}}, {vec1_TID}}, {14'd0}}, {vec1_TUSER}}, {vec1_TSTRB}}, {vec1_TKEEP}}, {vec1_TDATA}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln119_reg_482 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vec_out_TREADY == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln119_fu_216_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln119_fu_216_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln119_reg_482 == 1'd0) & (vec_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln119_fu_216_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln119_fu_216_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln119_reg_482 == 1'd0) & (vec_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln119_fu_216_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln119_fu_216_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((icmp_ln119_fu_216_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln119_fu_216_p2 == 1'd0) & (vec1_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln119_reg_482 == 1'd0) & (vec_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln119_reg_482 == 1'd0) & (vec_out_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cmp43_fu_346_p2 = ((j_reg_199 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_216_p2 = ((j_reg_199 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln121_4_cast_fu_284_p11 = {{{{{{{{{{vec1_TDEST}, {3'd0}}, {vec1_TID}}, {7'd0}}, {vec1_TLAST}}, {6'd0}}, {vec1_TUSER}}, {vec1_TSTRB}}, {vec1_TKEEP}}, {vec1_TDATA}};

assign or_ln128_fu_396_p2 = (190'd374144419156711147060143317175368453031918731001856 | and_ln_cast_fu_358_p9);

assign select_ln128_fu_402_p3 = ((cmp43_fu_346_p2[0:0] == 1'b1) ? or_ln128_fu_396_p2 : or_ln121_4_cast_fu_284_p11);

assign sub_ln127_1_fu_378_p2 = (trunc_ln121_1_fu_254_p4 - trunc_ln122_1_fu_316_p4);

assign sub_ln127_2_fu_384_p2 = (trunc_ln121_2_fu_264_p4 - trunc_ln122_2_fu_326_p4);

assign sub_ln127_3_fu_390_p2 = (trunc_ln121_3_fu_274_p4 - trunc_ln122_3_fu_336_p4);

assign sub_ln127_fu_352_p2 = (trunc_ln121_fu_250_p1 - trunc_ln122_fu_312_p1);

assign trunc_ln121_1_fu_254_p4 = {{vec1_TDATA[63:32]}};

assign trunc_ln121_2_fu_264_p4 = {{vec1_TDATA[95:64]}};

assign trunc_ln121_3_fu_274_p4 = {{vec1_TDATA[127:96]}};

assign trunc_ln121_fu_250_p1 = vec1_TDATA[31:0];

assign trunc_ln122_1_fu_316_p4 = {{vec2_TDATA[63:32]}};

assign trunc_ln122_2_fu_326_p4 = {{vec2_TDATA[95:64]}};

assign trunc_ln122_3_fu_336_p4 = {{vec2_TDATA[127:96]}};

assign trunc_ln122_fu_312_p1 = vec2_TDATA[31:0];

assign vec_out_TDATA = {{{{sub_ln127_3_reg_501}, {sub_ln127_2_reg_496}}, {sub_ln127_1_reg_491}}, {sub_ln127_reg_486}};

assign vec_out_TDEST = trunc_ln308_5_reg_531;

assign vec_out_TID = trunc_ln308_4_reg_526;

assign vec_out_TKEEP = tmp_reg_511;

assign vec_out_TLAST = tmp_1_reg_521;

assign vec_out_TSTRB = trunc_ln2_reg_506;

assign vec_out_TUSER = trunc_ln308_2_reg_516;

endmodule //vec_vec_op_streaming_vector_subtract
