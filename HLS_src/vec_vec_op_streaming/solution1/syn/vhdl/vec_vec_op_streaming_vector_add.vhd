-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vec_vec_op_streaming_vector_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vec1_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    vec1_TVALID : IN STD_LOGIC;
    vec1_TREADY : OUT STD_LOGIC;
    vec1_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    vec1_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    vec1_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    vec1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    vec1_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    vec1_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    vec2_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    vec2_TVALID : IN STD_LOGIC;
    vec2_TREADY : OUT STD_LOGIC;
    vec2_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    vec2_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    vec2_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    vec2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    vec2_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    vec2_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    vec_out_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    vec_out_TVALID : OUT STD_LOGIC;
    vec_out_TREADY : IN STD_LOGIC;
    vec_out_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    vec_out_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    vec_out_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    vec_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    vec_out_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    vec_out_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of vec_vec_op_streaming_vector_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv190_lc_1 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal vec1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln43_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vec2_TDATA_blk_n : STD_LOGIC;
    signal vec_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln43_reg_852 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_245 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln43_fu_256_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln51_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_1_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_1_reg_861 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_2_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_2_reg_866 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_3_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_3_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_4_fu_682_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_4_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_5_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_5_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_6_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_6_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_7_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_7_reg_891 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_8_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_8_reg_896 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_9_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_9_reg_901 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_10_fu_718_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_10_reg_906 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_11_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_11_reg_911 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_12_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_12_reg_916 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_13_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_13_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_14_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_14_reg_926 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_15_fu_748_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_15_reg_931 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_reg_936 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_941 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln308_s_reg_946 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln308_2_reg_956 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln308_3_reg_961 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln45_fu_296_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_fu_478_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_1_fu_300_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_1_fu_482_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_2_fu_310_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_2_fu_492_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_3_fu_320_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_3_fu_502_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_4_fu_330_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_4_fu_512_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_5_fu_340_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_5_fu_522_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_6_fu_350_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_6_fu_532_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_7_fu_360_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_7_fu_542_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_8_fu_370_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_8_fu_552_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_9_fu_380_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_9_fu_562_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_s_fu_390_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_s_fu_572_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_10_fu_400_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_10_fu_582_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_11_fu_410_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_11_fu_592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_12_fu_420_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_12_fu_602_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_13_fu_430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_13_fu_612_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_14_fu_440_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln46_14_fu_622_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln_cast_fu_644_p9 : STD_LOGIC_VECTOR (189 downto 0);
    signal cmp45_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln52_fu_754_p2 : STD_LOGIC_VECTOR (189 downto 0);
    signal tmp_s_fu_450_p11 : STD_LOGIC_VECTOR (189 downto 0);
    signal select_ln52_fu_760_p3 : STD_LOGIC_VECTOR (189 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_245 <= ap_const_lv6_0;
            elsif (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_245 <= add_ln43_fu_256_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln51_10_reg_906 <= add_ln51_10_fu_718_p2;
                add_ln51_11_reg_911 <= add_ln51_11_fu_724_p2;
                add_ln51_12_reg_916 <= add_ln51_12_fu_730_p2;
                add_ln51_13_reg_921 <= add_ln51_13_fu_736_p2;
                add_ln51_14_reg_926 <= add_ln51_14_fu_742_p2;
                add_ln51_15_reg_931 <= add_ln51_15_fu_748_p2;
                add_ln51_1_reg_861 <= add_ln51_1_fu_664_p2;
                add_ln51_2_reg_866 <= add_ln51_2_fu_670_p2;
                add_ln51_3_reg_871 <= add_ln51_3_fu_676_p2;
                add_ln51_4_reg_876 <= add_ln51_4_fu_682_p2;
                add_ln51_5_reg_881 <= add_ln51_5_fu_688_p2;
                add_ln51_6_reg_886 <= add_ln51_6_fu_694_p2;
                add_ln51_7_reg_891 <= add_ln51_7_fu_700_p2;
                add_ln51_8_reg_896 <= add_ln51_8_fu_706_p2;
                add_ln51_9_reg_901 <= add_ln51_9_fu_712_p2;
                add_ln51_reg_856 <= add_ln51_fu_638_p2;
                tmp_2_reg_951 <= select_ln52_fu_760_p3(168 downto 168);
                tmp_reg_941 <= select_ln52_fu_760_p3(143 downto 128);
                trunc_ln308_2_reg_956 <= select_ln52_fu_760_p3(180 downto 176);
                trunc_ln308_3_reg_961 <= select_ln52_fu_760_p3(189 downto 184);
                trunc_ln308_s_reg_946 <= select_ln52_fu_760_p3(161 downto 160);
                trunc_ln5_reg_936 <= select_ln52_fu_760_p3(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln43_reg_852 <= icmp_ln43_fu_262_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln43_fu_262_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln43_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln43_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln43_fu_256_p2 <= std_logic_vector(unsigned(j_reg_245) + unsigned(ap_const_lv6_1));
    add_ln51_10_fu_718_p2 <= std_logic_vector(unsigned(trunc_ln45_s_fu_390_p4) + unsigned(trunc_ln46_s_fu_572_p4));
    add_ln51_11_fu_724_p2 <= std_logic_vector(unsigned(trunc_ln45_10_fu_400_p4) + unsigned(trunc_ln46_10_fu_582_p4));
    add_ln51_12_fu_730_p2 <= std_logic_vector(unsigned(trunc_ln45_11_fu_410_p4) + unsigned(trunc_ln46_11_fu_592_p4));
    add_ln51_13_fu_736_p2 <= std_logic_vector(unsigned(trunc_ln45_12_fu_420_p4) + unsigned(trunc_ln46_12_fu_602_p4));
    add_ln51_14_fu_742_p2 <= std_logic_vector(unsigned(trunc_ln45_13_fu_430_p4) + unsigned(trunc_ln46_13_fu_612_p4));
    add_ln51_15_fu_748_p2 <= std_logic_vector(unsigned(trunc_ln45_14_fu_440_p4) + unsigned(trunc_ln46_14_fu_622_p4));
    add_ln51_1_fu_664_p2 <= std_logic_vector(unsigned(trunc_ln45_1_fu_300_p4) + unsigned(trunc_ln46_1_fu_482_p4));
    add_ln51_2_fu_670_p2 <= std_logic_vector(unsigned(trunc_ln45_2_fu_310_p4) + unsigned(trunc_ln46_2_fu_492_p4));
    add_ln51_3_fu_676_p2 <= std_logic_vector(unsigned(trunc_ln45_3_fu_320_p4) + unsigned(trunc_ln46_3_fu_502_p4));
    add_ln51_4_fu_682_p2 <= std_logic_vector(unsigned(trunc_ln45_4_fu_330_p4) + unsigned(trunc_ln46_4_fu_512_p4));
    add_ln51_5_fu_688_p2 <= std_logic_vector(unsigned(trunc_ln45_5_fu_340_p4) + unsigned(trunc_ln46_5_fu_522_p4));
    add_ln51_6_fu_694_p2 <= std_logic_vector(unsigned(trunc_ln45_6_fu_350_p4) + unsigned(trunc_ln46_6_fu_532_p4));
    add_ln51_7_fu_700_p2 <= std_logic_vector(unsigned(trunc_ln45_7_fu_360_p4) + unsigned(trunc_ln46_7_fu_542_p4));
    add_ln51_8_fu_706_p2 <= std_logic_vector(unsigned(trunc_ln45_8_fu_370_p4) + unsigned(trunc_ln46_8_fu_552_p4));
    add_ln51_9_fu_712_p2 <= std_logic_vector(unsigned(trunc_ln45_9_fu_380_p4) + unsigned(trunc_ln46_9_fu_562_p4));
    add_ln51_fu_638_p2 <= std_logic_vector(unsigned(trunc_ln45_fu_296_p1) + unsigned(trunc_ln46_fu_478_p1));
    and_ln_cast_fu_644_p9 <= (((((((vec1_TDEST & ap_const_lv3_0) & vec1_TID) & ap_const_lv14_0) & vec1_TUSER) & vec1_TSTRB) & vec1_TKEEP) & vec1_TDATA);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(vec1_TVALID, vec2_TVALID, vec_out_TREADY, ap_enable_reg_pp0_iter0, icmp_ln43_fu_262_p2, ap_enable_reg_pp0_iter1, icmp_ln43_reg_852)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln43_reg_852 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (vec_out_TREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (vec2_TVALID = ap_const_logic_0)) or ((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (vec1_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(vec1_TVALID, vec2_TVALID, vec_out_TREADY, ap_enable_reg_pp0_iter0, icmp_ln43_fu_262_p2, ap_enable_reg_pp0_iter1, icmp_ln43_reg_852, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln43_reg_852 = ap_const_lv1_0) and (vec_out_TREADY = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (vec2_TVALID = ap_const_logic_0)) or ((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (vec1_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(vec1_TVALID, vec2_TVALID, vec_out_TREADY, ap_enable_reg_pp0_iter0, icmp_ln43_fu_262_p2, ap_enable_reg_pp0_iter1, icmp_ln43_reg_852, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln43_reg_852 = ap_const_lv1_0) and (vec_out_TREADY = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (vec2_TVALID = ap_const_logic_0)) or ((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (vec1_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(vec1_TVALID, vec2_TVALID, icmp_ln43_fu_262_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (vec2_TVALID = ap_const_logic_0)) or ((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (vec1_TVALID = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(vec_out_TREADY, icmp_ln43_reg_852)
    begin
                ap_block_state3_io <= ((icmp_ln43_reg_852 = ap_const_lv1_0) and (vec_out_TREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(vec_out_TREADY, icmp_ln43_reg_852)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln43_reg_852 = ap_const_lv1_0) and (vec_out_TREADY = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln43_fu_262_p2)
    begin
        if ((icmp_ln43_fu_262_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp45_fu_632_p2 <= "1" when (j_reg_245 = ap_const_lv6_1F) else "0";
    icmp_ln43_fu_262_p2 <= "1" when (j_reg_245 = ap_const_lv6_20) else "0";
    or_ln52_fu_754_p2 <= (ap_const_lv190_lc_1 or and_ln_cast_fu_644_p9);
    select_ln52_fu_760_p3 <= 
        or_ln52_fu_754_p2 when (cmp45_fu_632_p2(0) = '1') else 
        tmp_s_fu_450_p11;
    tmp_s_fu_450_p11 <= (((((((((vec1_TDEST & ap_const_lv3_0) & vec1_TID) & ap_const_lv7_0) & vec1_TLAST) & ap_const_lv6_0) & vec1_TUSER) & vec1_TSTRB) & vec1_TKEEP) & vec1_TDATA);
    trunc_ln45_10_fu_400_p4 <= vec1_TDATA(95 downto 88);
    trunc_ln45_11_fu_410_p4 <= vec1_TDATA(103 downto 96);
    trunc_ln45_12_fu_420_p4 <= vec1_TDATA(111 downto 104);
    trunc_ln45_13_fu_430_p4 <= vec1_TDATA(119 downto 112);
    trunc_ln45_14_fu_440_p4 <= vec1_TDATA(127 downto 120);
    trunc_ln45_1_fu_300_p4 <= vec1_TDATA(15 downto 8);
    trunc_ln45_2_fu_310_p4 <= vec1_TDATA(23 downto 16);
    trunc_ln45_3_fu_320_p4 <= vec1_TDATA(31 downto 24);
    trunc_ln45_4_fu_330_p4 <= vec1_TDATA(39 downto 32);
    trunc_ln45_5_fu_340_p4 <= vec1_TDATA(47 downto 40);
    trunc_ln45_6_fu_350_p4 <= vec1_TDATA(55 downto 48);
    trunc_ln45_7_fu_360_p4 <= vec1_TDATA(63 downto 56);
    trunc_ln45_8_fu_370_p4 <= vec1_TDATA(71 downto 64);
    trunc_ln45_9_fu_380_p4 <= vec1_TDATA(79 downto 72);
    trunc_ln45_fu_296_p1 <= vec1_TDATA(8 - 1 downto 0);
    trunc_ln45_s_fu_390_p4 <= vec1_TDATA(87 downto 80);
    trunc_ln46_10_fu_582_p4 <= vec2_TDATA(95 downto 88);
    trunc_ln46_11_fu_592_p4 <= vec2_TDATA(103 downto 96);
    trunc_ln46_12_fu_602_p4 <= vec2_TDATA(111 downto 104);
    trunc_ln46_13_fu_612_p4 <= vec2_TDATA(119 downto 112);
    trunc_ln46_14_fu_622_p4 <= vec2_TDATA(127 downto 120);
    trunc_ln46_1_fu_482_p4 <= vec2_TDATA(15 downto 8);
    trunc_ln46_2_fu_492_p4 <= vec2_TDATA(23 downto 16);
    trunc_ln46_3_fu_502_p4 <= vec2_TDATA(31 downto 24);
    trunc_ln46_4_fu_512_p4 <= vec2_TDATA(39 downto 32);
    trunc_ln46_5_fu_522_p4 <= vec2_TDATA(47 downto 40);
    trunc_ln46_6_fu_532_p4 <= vec2_TDATA(55 downto 48);
    trunc_ln46_7_fu_542_p4 <= vec2_TDATA(63 downto 56);
    trunc_ln46_8_fu_552_p4 <= vec2_TDATA(71 downto 64);
    trunc_ln46_9_fu_562_p4 <= vec2_TDATA(79 downto 72);
    trunc_ln46_fu_478_p1 <= vec2_TDATA(8 - 1 downto 0);
    trunc_ln46_s_fu_572_p4 <= vec2_TDATA(87 downto 80);

    vec1_TDATA_blk_n_assign_proc : process(vec1_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln43_fu_262_p2)
    begin
        if (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec1_TDATA_blk_n <= vec1_TVALID;
        else 
            vec1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vec1_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln43_fu_262_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec1_TREADY <= ap_const_logic_1;
        else 
            vec1_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    vec2_TDATA_blk_n_assign_proc : process(vec2_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln43_fu_262_p2)
    begin
        if (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec2_TDATA_blk_n <= vec2_TVALID;
        else 
            vec2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vec2_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln43_fu_262_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln43_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec2_TREADY <= ap_const_logic_1;
        else 
            vec2_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    vec_out_TDATA <= (((((((((((((((add_ln51_15_reg_931 & add_ln51_14_reg_926) & add_ln51_13_reg_921) & add_ln51_12_reg_916) & add_ln51_11_reg_911) & add_ln51_10_reg_906) & add_ln51_9_reg_901) & add_ln51_8_reg_896) & add_ln51_7_reg_891) & add_ln51_6_reg_886) & add_ln51_5_reg_881) & add_ln51_4_reg_876) & add_ln51_3_reg_871) & add_ln51_2_reg_866) & add_ln51_1_reg_861) & add_ln51_reg_856);

    vec_out_TDATA_blk_n_assign_proc : process(vec_out_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln43_reg_852)
    begin
        if (((icmp_ln43_reg_852 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec_out_TDATA_blk_n <= vec_out_TREADY;
        else 
            vec_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vec_out_TDEST <= trunc_ln308_3_reg_961;
    vec_out_TID <= trunc_ln308_2_reg_956;
    vec_out_TKEEP <= tmp_reg_941;
    vec_out_TLAST <= tmp_2_reg_951;
    vec_out_TSTRB <= trunc_ln5_reg_936;
    vec_out_TUSER <= trunc_ln308_s_reg_946;

    vec_out_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln43_reg_852, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln43_reg_852 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vec_out_TVALID <= ap_const_logic_1;
        else 
            vec_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
