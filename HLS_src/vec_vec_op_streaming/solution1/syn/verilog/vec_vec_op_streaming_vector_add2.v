// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vec_vec_op_streaming_vector_add2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vec1_TDATA,
        vec1_TVALID,
        vec1_TREADY,
        vec1_TKEEP,
        vec1_TSTRB,
        vec1_TUSER,
        vec1_TLAST,
        vec1_TID,
        vec1_TDEST,
        vec2_TDATA,
        vec2_TVALID,
        vec2_TREADY,
        vec2_TKEEP,
        vec2_TSTRB,
        vec2_TUSER,
        vec2_TLAST,
        vec2_TID,
        vec2_TDEST,
        vec_out_TDATA,
        vec_out_TVALID,
        vec_out_TREADY,
        vec_out_TKEEP,
        vec_out_TSTRB,
        vec_out_TUSER,
        vec_out_TLAST,
        vec_out_TID,
        vec_out_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] vec1_TDATA;
input   vec1_TVALID;
output   vec1_TREADY;
input  [15:0] vec1_TKEEP;
input  [15:0] vec1_TSTRB;
input  [1:0] vec1_TUSER;
input  [0:0] vec1_TLAST;
input  [4:0] vec1_TID;
input  [5:0] vec1_TDEST;
input  [127:0] vec2_TDATA;
input   vec2_TVALID;
output   vec2_TREADY;
input  [15:0] vec2_TKEEP;
input  [15:0] vec2_TSTRB;
input  [1:0] vec2_TUSER;
input  [0:0] vec2_TLAST;
input  [4:0] vec2_TID;
input  [5:0] vec2_TDEST;
output  [127:0] vec_out_TDATA;
output   vec_out_TVALID;
input   vec_out_TREADY;
output  [15:0] vec_out_TKEEP;
output  [15:0] vec_out_TSTRB;
output  [1:0] vec_out_TUSER;
output  [0:0] vec_out_TLAST;
output  [4:0] vec_out_TID;
output  [5:0] vec_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vec1_TREADY;
reg vec2_TREADY;
reg vec_out_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    vec1_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln118_fu_216_p2;
reg    vec2_TDATA_blk_n;
reg    vec_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln118_reg_684;
reg   [1:0] j_reg_199;
wire   [1:0] add_ln118_fu_210_p2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] ref_tmp_keep_reg_688;
reg   [15:0] ref_tmp_strb_reg_693;
reg   [1:0] ref_tmp_user_reg_698;
reg   [0:0] ref_tmp_last_reg_703;
reg   [4:0] ref_tmp_id_reg_708;
reg   [5:0] ref_tmp_dest_reg_713;
wire   [7:0] add_ln126_fu_562_p2;
reg   [7:0] add_ln126_reg_718;
wire   [7:0] add_ln126_1_fu_568_p2;
reg   [7:0] add_ln126_1_reg_723;
wire   [7:0] add_ln126_2_fu_574_p2;
reg   [7:0] add_ln126_2_reg_728;
wire   [7:0] add_ln126_3_fu_580_p2;
reg   [7:0] add_ln126_3_reg_733;
wire   [7:0] add_ln126_4_fu_586_p2;
reg   [7:0] add_ln126_4_reg_738;
wire   [7:0] add_ln126_5_fu_592_p2;
reg   [7:0] add_ln126_5_reg_743;
wire   [7:0] add_ln126_6_fu_598_p2;
reg   [7:0] add_ln126_6_reg_748;
wire   [7:0] add_ln126_7_fu_604_p2;
reg   [7:0] add_ln126_7_reg_753;
wire   [7:0] add_ln126_8_fu_610_p2;
reg   [7:0] add_ln126_8_reg_758;
wire   [7:0] add_ln126_9_fu_616_p2;
reg   [7:0] add_ln126_9_reg_763;
wire   [7:0] add_ln126_10_fu_622_p2;
reg   [7:0] add_ln126_10_reg_768;
wire   [7:0] add_ln126_11_fu_628_p2;
reg   [7:0] add_ln126_11_reg_773;
wire   [7:0] add_ln126_12_fu_634_p2;
reg   [7:0] add_ln126_12_reg_778;
wire   [7:0] add_ln126_13_fu_640_p2;
reg   [7:0] add_ln126_13_reg_783;
wire   [7:0] add_ln126_14_fu_646_p2;
reg   [7:0] add_ln126_14_reg_788;
wire   [7:0] add_ln126_15_fu_652_p2;
reg   [7:0] add_ln126_15_reg_793;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln120_fu_250_p1;
wire   [7:0] trunc_ln121_fu_408_p1;
wire   [7:0] trunc_ln120_1_fu_254_p4;
wire   [7:0] trunc_ln121_1_fu_412_p4;
wire   [7:0] trunc_ln120_2_fu_264_p4;
wire   [7:0] trunc_ln121_2_fu_422_p4;
wire   [7:0] trunc_ln120_3_fu_274_p4;
wire   [7:0] trunc_ln121_3_fu_432_p4;
wire   [7:0] trunc_ln120_4_fu_284_p4;
wire   [7:0] trunc_ln121_4_fu_442_p4;
wire   [7:0] trunc_ln120_5_fu_294_p4;
wire   [7:0] trunc_ln121_5_fu_452_p4;
wire   [7:0] trunc_ln120_6_fu_304_p4;
wire   [7:0] trunc_ln121_6_fu_462_p4;
wire   [7:0] trunc_ln120_7_fu_314_p4;
wire   [7:0] trunc_ln121_7_fu_472_p4;
wire   [7:0] trunc_ln120_8_fu_324_p4;
wire   [7:0] trunc_ln121_8_fu_482_p4;
wire   [7:0] trunc_ln120_9_fu_334_p4;
wire   [7:0] trunc_ln121_9_fu_492_p4;
wire   [7:0] trunc_ln120_s_fu_344_p4;
wire   [7:0] trunc_ln121_s_fu_502_p4;
wire   [7:0] trunc_ln120_10_fu_354_p4;
wire   [7:0] trunc_ln121_10_fu_512_p4;
wire   [7:0] trunc_ln120_11_fu_364_p4;
wire   [7:0] trunc_ln121_11_fu_522_p4;
wire   [7:0] trunc_ln120_12_fu_374_p4;
wire   [7:0] trunc_ln121_12_fu_532_p4;
wire   [7:0] trunc_ln120_13_fu_384_p4;
wire   [7:0] trunc_ln121_13_fu_542_p4;
wire   [7:0] trunc_ln120_14_fu_394_p4;
wire   [7:0] trunc_ln121_14_fu_552_p4;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_199 <= 2'd0;
    end else if (((icmp_ln118_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_199 <= add_ln118_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln126_10_reg_768 <= add_ln126_10_fu_622_p2;
        add_ln126_11_reg_773 <= add_ln126_11_fu_628_p2;
        add_ln126_12_reg_778 <= add_ln126_12_fu_634_p2;
        add_ln126_13_reg_783 <= add_ln126_13_fu_640_p2;
        add_ln126_14_reg_788 <= add_ln126_14_fu_646_p2;
        add_ln126_15_reg_793 <= add_ln126_15_fu_652_p2;
        add_ln126_1_reg_723 <= add_ln126_1_fu_568_p2;
        add_ln126_2_reg_728 <= add_ln126_2_fu_574_p2;
        add_ln126_3_reg_733 <= add_ln126_3_fu_580_p2;
        add_ln126_4_reg_738 <= add_ln126_4_fu_586_p2;
        add_ln126_5_reg_743 <= add_ln126_5_fu_592_p2;
        add_ln126_6_reg_748 <= add_ln126_6_fu_598_p2;
        add_ln126_7_reg_753 <= add_ln126_7_fu_604_p2;
        add_ln126_8_reg_758 <= add_ln126_8_fu_610_p2;
        add_ln126_9_reg_763 <= add_ln126_9_fu_616_p2;
        add_ln126_reg_718 <= add_ln126_fu_562_p2;
        ref_tmp_dest_reg_713 <= vec1_TDEST;
        ref_tmp_id_reg_708 <= vec1_TID;
        ref_tmp_keep_reg_688 <= vec1_TKEEP;
        ref_tmp_last_reg_703 <= vec1_TLAST;
        ref_tmp_strb_reg_693 <= vec1_TSTRB;
        ref_tmp_user_reg_698 <= vec1_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln118_reg_684 <= icmp_ln118_fu_216_p2;
    end
end

always @ (*) begin
    if ((icmp_ln118_fu_216_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_TDATA_blk_n = vec1_TVALID;
    end else begin
        vec1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec1_TREADY = 1'b1;
    end else begin
        vec1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec2_TDATA_blk_n = vec2_TVALID;
    end else begin
        vec2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_216_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec2_TREADY = 1'b1;
    end else begin
        vec2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_684 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_out_TDATA_blk_n = vec_out_TREADY;
    end else begin
        vec_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln118_reg_684 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_out_TVALID = 1'b1;
    end else begin
        vec_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln118_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln118_fu_216_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln118_fu_210_p2 = (j_reg_199 + 2'd1);

assign add_ln126_10_fu_622_p2 = (trunc_ln120_s_fu_344_p4 + trunc_ln121_s_fu_502_p4);

assign add_ln126_11_fu_628_p2 = (trunc_ln120_10_fu_354_p4 + trunc_ln121_10_fu_512_p4);

assign add_ln126_12_fu_634_p2 = (trunc_ln120_11_fu_364_p4 + trunc_ln121_11_fu_522_p4);

assign add_ln126_13_fu_640_p2 = (trunc_ln120_12_fu_374_p4 + trunc_ln121_12_fu_532_p4);

assign add_ln126_14_fu_646_p2 = (trunc_ln120_13_fu_384_p4 + trunc_ln121_13_fu_542_p4);

assign add_ln126_15_fu_652_p2 = (trunc_ln120_14_fu_394_p4 + trunc_ln121_14_fu_552_p4);

assign add_ln126_1_fu_568_p2 = (trunc_ln120_1_fu_254_p4 + trunc_ln121_1_fu_412_p4);

assign add_ln126_2_fu_574_p2 = (trunc_ln120_2_fu_264_p4 + trunc_ln121_2_fu_422_p4);

assign add_ln126_3_fu_580_p2 = (trunc_ln120_3_fu_274_p4 + trunc_ln121_3_fu_432_p4);

assign add_ln126_4_fu_586_p2 = (trunc_ln120_4_fu_284_p4 + trunc_ln121_4_fu_442_p4);

assign add_ln126_5_fu_592_p2 = (trunc_ln120_5_fu_294_p4 + trunc_ln121_5_fu_452_p4);

assign add_ln126_6_fu_598_p2 = (trunc_ln120_6_fu_304_p4 + trunc_ln121_6_fu_462_p4);

assign add_ln126_7_fu_604_p2 = (trunc_ln120_7_fu_314_p4 + trunc_ln121_7_fu_472_p4);

assign add_ln126_8_fu_610_p2 = (trunc_ln120_8_fu_324_p4 + trunc_ln121_8_fu_482_p4);

assign add_ln126_9_fu_616_p2 = (trunc_ln120_9_fu_334_p4 + trunc_ln121_9_fu_492_p4);

assign add_ln126_fu_562_p2 = (trunc_ln120_fu_250_p1 + trunc_ln121_fu_408_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln118_reg_684 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vec_out_TREADY == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln118_fu_216_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln118_fu_216_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln118_reg_684 == 1'd0) & (vec_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln118_fu_216_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln118_fu_216_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln118_reg_684 == 1'd0) & (vec_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln118_fu_216_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln118_fu_216_p2 == 1'd0) & (vec1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((icmp_ln118_fu_216_p2 == 1'd0) & (vec2_TVALID == 1'b0)) | ((icmp_ln118_fu_216_p2 == 1'd0) & (vec1_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln118_reg_684 == 1'd0) & (vec_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln118_reg_684 == 1'd0) & (vec_out_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln118_fu_216_p2 = ((j_reg_199 == 2'd3) ? 1'b1 : 1'b0);

assign trunc_ln120_10_fu_354_p4 = {{vec1_TDATA[95:88]}};

assign trunc_ln120_11_fu_364_p4 = {{vec1_TDATA[103:96]}};

assign trunc_ln120_12_fu_374_p4 = {{vec1_TDATA[111:104]}};

assign trunc_ln120_13_fu_384_p4 = {{vec1_TDATA[119:112]}};

assign trunc_ln120_14_fu_394_p4 = {{vec1_TDATA[127:120]}};

assign trunc_ln120_1_fu_254_p4 = {{vec1_TDATA[15:8]}};

assign trunc_ln120_2_fu_264_p4 = {{vec1_TDATA[23:16]}};

assign trunc_ln120_3_fu_274_p4 = {{vec1_TDATA[31:24]}};

assign trunc_ln120_4_fu_284_p4 = {{vec1_TDATA[39:32]}};

assign trunc_ln120_5_fu_294_p4 = {{vec1_TDATA[47:40]}};

assign trunc_ln120_6_fu_304_p4 = {{vec1_TDATA[55:48]}};

assign trunc_ln120_7_fu_314_p4 = {{vec1_TDATA[63:56]}};

assign trunc_ln120_8_fu_324_p4 = {{vec1_TDATA[71:64]}};

assign trunc_ln120_9_fu_334_p4 = {{vec1_TDATA[79:72]}};

assign trunc_ln120_fu_250_p1 = vec1_TDATA[7:0];

assign trunc_ln120_s_fu_344_p4 = {{vec1_TDATA[87:80]}};

assign trunc_ln121_10_fu_512_p4 = {{vec2_TDATA[95:88]}};

assign trunc_ln121_11_fu_522_p4 = {{vec2_TDATA[103:96]}};

assign trunc_ln121_12_fu_532_p4 = {{vec2_TDATA[111:104]}};

assign trunc_ln121_13_fu_542_p4 = {{vec2_TDATA[119:112]}};

assign trunc_ln121_14_fu_552_p4 = {{vec2_TDATA[127:120]}};

assign trunc_ln121_1_fu_412_p4 = {{vec2_TDATA[15:8]}};

assign trunc_ln121_2_fu_422_p4 = {{vec2_TDATA[23:16]}};

assign trunc_ln121_3_fu_432_p4 = {{vec2_TDATA[31:24]}};

assign trunc_ln121_4_fu_442_p4 = {{vec2_TDATA[39:32]}};

assign trunc_ln121_5_fu_452_p4 = {{vec2_TDATA[47:40]}};

assign trunc_ln121_6_fu_462_p4 = {{vec2_TDATA[55:48]}};

assign trunc_ln121_7_fu_472_p4 = {{vec2_TDATA[63:56]}};

assign trunc_ln121_8_fu_482_p4 = {{vec2_TDATA[71:64]}};

assign trunc_ln121_9_fu_492_p4 = {{vec2_TDATA[79:72]}};

assign trunc_ln121_fu_408_p1 = vec2_TDATA[7:0];

assign trunc_ln121_s_fu_502_p4 = {{vec2_TDATA[87:80]}};

assign vec_out_TDATA = {{{{{{{{{{{{{{{{add_ln126_15_reg_793}, {add_ln126_14_reg_788}}, {add_ln126_13_reg_783}}, {add_ln126_12_reg_778}}, {add_ln126_11_reg_773}}, {add_ln126_10_reg_768}}, {add_ln126_9_reg_763}}, {add_ln126_8_reg_758}}, {add_ln126_7_reg_753}}, {add_ln126_6_reg_748}}, {add_ln126_5_reg_743}}, {add_ln126_4_reg_738}}, {add_ln126_3_reg_733}}, {add_ln126_2_reg_728}}, {add_ln126_1_reg_723}}, {add_ln126_reg_718}};

assign vec_out_TDEST = ref_tmp_dest_reg_713;

assign vec_out_TID = ref_tmp_id_reg_708;

assign vec_out_TKEEP = ref_tmp_keep_reg_688;

assign vec_out_TLAST = ref_tmp_last_reg_703;

assign vec_out_TSTRB = ref_tmp_strb_reg_693;

assign vec_out_TUSER = ref_tmp_user_reg_698;

endmodule //vec_vec_op_streaming_vector_add2
